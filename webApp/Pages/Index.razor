@using Microsoft.AspNetCore.Components.Forms
@using System.Text
@using STAR.Format
@using STAR.Writer
@inject IJSRuntime JS

@page "/"

<div class="mainContainer">
    <div class="message">Importez un fichier STAR (.lst)</div>
    <div @ref="fileDropContainer" class="file-drop-zone @HoverClass" @ondragenter="OnDragEnter" @ondragleave="OnDragLeave" @ondragover="OnDragEnter">
        <InputFile class="selectFilesInput" OnChange="@OnFileChange" accept=".lst" />
    </div>
    <div class="spacer"></div>
    <div class="message">@message</div>
    <div class="convert ">
        <button type="button" class="convertButton @DisabledClass" @onclick="ConvertAndDownloadFile" disabled="@conversionDisabled">Convertir en format Word</button>
    </div>
</div>

<div class="about">
    <p><b>La conversion s'effectue localement; aucun fichier n'est transmis hors de cet appareil.</b></p>
    <p>Consultez le code qui génère cette page: <a href="https://github.com/julblais/convertisseur-star">GitHub</a></p>
    <p class="version">version @versionWebApp (core @versionCore)</p>
</div>

@code
{
    public static string versionWebApp = webApp.Version.AsString;
    public static string versionCore = STAR.Version.AsString;

    const string k_HoverClass = "hover";
    const string k_DisabledClass = "disabled";
    const string k_NoFileSelected = "Aucun fichier sélectionné";
    const string k_FileSelectedFormat = "Fichier sélectionné: {0} ({1}kB)";
    const string k_FileTooLargeFormat = "Erreur: {0} ({1}KB) dépasse la taille maximale (500KB).";
    const string k_OutputExtension = ".doc";
    const long k_MaxFileSizeBytes = 500000;

    public string message = k_NoFileSelected;
    public string HoverClass;
    public string DisabledClass = k_DisabledClass;
    public bool conversionDisabled = true;

    IBrowserFile selectedFile;
    ElementReference fileDropContainer;

    void OnDragEnter(DragEventArgs e)
    {
        HoverClass = k_HoverClass;  
        StateHasChanged();
    }

    void OnDragLeave(DragEventArgs e)
    { 
        HoverClass = string.Empty;  
        StateHasChanged();
    }

    void EnableConversionButton()
    {
        conversionDisabled = false;
        DisabledClass = string.Empty;
    }

    void DisableConversionButton()
    {
        conversionDisabled = true;
        DisabledClass = k_DisabledClass;
    }

    public void OnFileChange(InputFileChangeEventArgs args)
    {
        HoverClass = string.Empty;  
        var file = args.File;
        if (file == null)
        {
            DisableConversionButton();
            return;
        }

        var fileSizeKB = file.Size / 1024L;
        if (file.Size >= k_MaxFileSizeBytes)
        {
            message = string.Format(k_FileTooLargeFormat, file.Name, fileSizeKB);
            DisableConversionButton();
            return;
        }
        
        message = string.Format(k_FileSelectedFormat, file.Name, fileSizeKB);
        selectedFile = file; 
        EnableConversionButton();
        StateHasChanged();
    }

    async Task ConvertAndDownloadFile()
    {
        var text = await Converter.Convert(selectedFile, k_MaxFileSizeBytes);
        
        var outputFilename = Path.ChangeExtension(selectedFile.Name, k_OutputExtension);
        await Converter.CreateFileAndDownload(text, outputFilename, JS);
    }
}