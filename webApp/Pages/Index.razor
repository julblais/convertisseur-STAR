@using Microsoft.AspNetCore.Components.Forms
@using System.Text
@using STAR.Format
@using STAR.Writer
@inject IJSRuntime JS

@page "/"

<div class="mainContainer">
    <div class="message">Importez un fichier STAR (.lst)</div>
    <div @ref="fileDropContainer" class="file-drop-zone @HoverClass" @ondragenter="OnDragEnter" @ondragleave="OnDragLeave" @ondragover="OnDragEnter">
        <InputFile class="selectFilesInput" OnChange="@OnFileChange" accept=".lst" />
    </div>
    <div class="spacer"></div>
    <div class="message">@message</div>
    <div class="convert ">
        <button type="button" class="convertButton @DisabledClass" @onclick="ConvertAndDownloadFile" disabled="@conversionDisabled">Convertir en format Word</button>
    </div>
</div>

@code
{
    public string message = k_NoFileSelected;
    public string HoverClass;
    public string DisabledClass = k_DisabledClass;
    public bool conversionDisabled = true;

    const string k_HoverClass = "hover";
    const string k_DisabledClass = "disabled";
    const string k_NoFileSelected = "Aucun fichier sélectionné";
    const string k_FileSelectedFormat = "Fichier sélectionné: {0} ({1}kB)";
    const string k_FileTooLargeFormat = "Erreur: {0} ({1}KB) dépasse la taille maximale (500KB).";

    const string k_OutputExtension = ".doc";
    const long k_MaxFileSizeBytes = 500000;
    const int codePage = 28591; //ISO-8859-1 Western European

    IBrowserFile selectedFile;
    ElementReference fileDropContainer;

    void OnDragEnter(DragEventArgs e)
    {
        HoverClass = k_HoverClass;  
        StateHasChanged();
    }

    void OnDragLeave(DragEventArgs e)
    { 
        HoverClass = string.Empty;  
        StateHasChanged();
    }

    void EnableConversionButton()
    {
        conversionDisabled = false;
        DisabledClass = string.Empty;
    }

    void DisableConversionButton()
    {
        conversionDisabled = true;
        DisabledClass = k_DisabledClass;
    }

    public void OnFileChange(InputFileChangeEventArgs args)
    {
        HoverClass = string.Empty;  
        var file = args.File;
        if (file == null)
        {
            DisableConversionButton();
            return;
        }

        var fileSizeKB = file.Size / 1024L;
        if (file.Size >= k_MaxFileSizeBytes)
        {
            message = string.Format(k_FileTooLargeFormat, file.Name, fileSizeKB);
            DisableConversionButton();
            return;
        }
        
        message = string.Format(k_FileSelectedFormat, file.Name, fileSizeKB);
        selectedFile = file; 
        EnableConversionButton();
        StateHasChanged();
    }

    async Task ConvertAndDownloadFile()
    {
        if (selectedFile == null)
            await Task.CompletedTask;

        using var inputStream = selectedFile.OpenReadStream(k_MaxFileSizeBytes);
        var commands = await GetCommands(inputStream);
        var outputText = WriteCommands(commands, selectedFile.Name);

        using var outputStream = new MemoryStream(Encoding.UTF8.GetBytes(outputText));
        using var outputStreamRef = new DotNetStreamReference(outputStream);
        
        var outputFilename =  System.IO.Path.ChangeExtension(selectedFile.Name, k_OutputExtension);
        await JS.InvokeVoidAsync("downloadFileFromStream", outputFilename, outputStreamRef);
    }

    async Task<IEnumerable<Command>> GetCommands(Stream stream)
    {
        var contents = await ReadFile(stream);

        var rules = new Formatter.Rule[]
        {
            Rules.FixEndline,
            Rules.FixStartRecord,
            Rules.AddRecordSections,
            Rules.FixLongSpaces,
            Rules.RemoveItalicsStart,
            Rules.RemoveItalicsEnd
        };
        
        return rules.ApplyTo(contents);
    }

    string WriteCommands(IEnumerable<Command> commands, string fileName)
    {
        using var writer = new StringWriter();
        var documentWriter = new WordWriter(fileName);
        commands.WriteTo(documentWriter, writer);
        return writer.ToString();
    }

    async Task<string> ReadFile(Stream stream)
    {
        var encoding = Encoding.GetEncoding(codePage);
        using var reader = new StreamReader(stream, encoding);
        StringBuilder builder = new StringBuilder();
        
        var line = await reader.ReadLineAsync();
        builder.AppendLine(line);
        while (line != null)
        {
            line = await reader.ReadLineAsync();
            builder.AppendLine(line);
        }
        return builder.ToString();
    }
}