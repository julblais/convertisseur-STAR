@using Microsoft.AspNetCore.Components.Forms
@using System.Text
@using STAR.Format
@using STAR.Writer

@page "/"

<h1>Convertisseur STAR</h1>

<br>

<InputFile OnChange="@OnFileChange" multiple />

<a href="data:application/octet-stream;charset=utf-16le;base64,//5mAG8AbwAgAGIAYQByAAoA">@text</a>

<p> @text </p>

@code
{
    static int codePage = 28591; //ISO-8859-1 Western European
    public string text = string.Empty;

    public async void OnFileChange(InputFileChangeEventArgs args)
    {
        var files = args.GetMultipleFiles();
        foreach(var file in files)
        {
            using var stream = file.OpenReadStream(5000000);
            var commands = await GetCommands(stream);
            text = WriteCommands(commands);
        }
        StateHasChanged();
    }

    async Task<IEnumerable<Command>> GetCommands(Stream stream)
    {
        var contents = await ReadFile(stream);

        var rules = new Formatter.Rule[]
        {
            Rules.FixEndline,
            Rules.FixStartRecord,
            Rules.AddRecordSections,
            Rules.FixLongSpaces
        };
        
        return rules.ApplyTo(contents);
    }

    string WriteCommands(IEnumerable<Command> commands)
    {
        using var writer = new StringWriter();
        var documentWriter = new WordWriter("test");
        commands.WriteTo(documentWriter, writer);
        return writer.ToString();
    }

    async Task<string> ReadFile(Stream stream)
    {
        var encoding = Encoding.GetEncoding(codePage);
        using var reader = new StreamReader(stream, encoding);
        StringBuilder builder = new StringBuilder();
        
        var line = await reader.ReadLineAsync();
        builder.AppendLine(line);
        while (line != null)
        {
            line = await reader.ReadLineAsync();
            builder.AppendLine(line);
        }
        return builder.ToString();
    }
}