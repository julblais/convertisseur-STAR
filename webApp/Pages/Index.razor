@using Microsoft.AspNetCore.Components.Forms
@using System.Text
@using STAR.Format
@using STAR.Writer
@inject IJSRuntime JS

@page "/"

<table class="titleBox"><tr>
  <th class="title">Convertisseur STAR</th>
  <th class="star"><img class="star_img" src="imgs/star.svg" alt="Étoile"/></th>
</tr></table>

<br>

<div class="mainContainer">
    <div @ref="fileDropContainer" class="file-drop-zone @HoverClass" @ondragenter="OnDragEnter" @ondragleave="OnDragLeave" @ondragover="OnDragEnter">
        <InputFile class="selectFilesInput" OnChange="@OnFileChange" accept=".lst,.svg" multiple />
    </div>
    <div class="fileResult">
        <p>Votre fichier est @name</p>
    </div>
    <div class="convert">
        <button class="convertButton" @onclick="DownloadFileFromStream">Convertir en format Word (.doc)</button>
    </div>
</div>

<br>
<br>


<br>

@code
{
    static int codePage = 28591; //ISO-8859-1 Western European
    public string text = string.Empty;
    public string name = string.Empty;
    ElementReference fileDropContainer;

    private string HoverClass;
    void OnDragEnter(DragEventArgs e) => HoverClass = "hover";
    void OnDragLeave(DragEventArgs e) => HoverClass = string.Empty;

    public async void OnFileChange(InputFileChangeEventArgs args)
    {
        var files = args.GetMultipleFiles(10);
        foreach(var file in files)
        {
            name = file.Name;
            using var stream = file.OpenReadStream(5000000);
            var commands = await GetCommands(stream);
            text = WriteCommands(commands);
        }
        StateHasChanged();
    }

    async Task DownloadFileFromStream()
    {        
        using var stream = new MemoryStream(Encoding.UTF8.GetBytes(text));
        using var streamRef = new DotNetStreamReference(stream);

        await JS.InvokeVoidAsync("downloadFileFromStream", "test.doc", streamRef);
    }

    async Task<IEnumerable<Command>> GetCommands(Stream stream)
    {
        var contents = await ReadFile(stream);

        var rules = new Formatter.Rule[]
        {
            Rules.FixEndline,
            Rules.FixStartRecord,
            Rules.AddRecordSections,
            Rules.FixLongSpaces,
            Rules.RemoveItalicsStart,
            Rules.RemoveItalicsEnd
        };
        
        return rules.ApplyTo(contents);
    }

    string WriteCommands(IEnumerable<Command> commands)
    {
        using var writer = new StringWriter();
        var documentWriter = new WordWriter("test");
        commands.WriteTo(documentWriter, writer);
        return writer.ToString();
    }

    async Task<string> ReadFile(Stream stream)
    {
        var encoding = Encoding.GetEncoding(codePage);
        using var reader = new StreamReader(stream, encoding);
        StringBuilder builder = new StringBuilder();
        
        var line = await reader.ReadLineAsync();
        builder.AppendLine(line);
        while (line != null)
        {
            line = await reader.ReadLineAsync();
            builder.AppendLine(line);
        }
        return builder.ToString();
    }
}